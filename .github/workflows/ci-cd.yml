name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  AZURE_RESOURCE_GROUP: 'rg-blog-app'
  AZURE_CONTAINER_REGISTRY: 'acrblogappsdk8s'
  AKS_CLUSTER_NAME: 'aks-blog-app'
  IMAGE_NAME: 'blog-app'
  DEPLOYMENT_NAME: 'blog-app-deployment'
  NAMESPACE: 'blog-app'

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: |
        cd WebApplication1
        dotnet restore

    - name: Build application
      run: |
        cd WebApplication1
        dotnet build --no-restore --configuration Release

    - name: Run tests
      run: |
        cd WebApplication1
        dotnet test --no-build --configuration Release --verbosity normal

    - name: Publish application
      run: |
        cd WebApplication1
        dotnet publish -c Release -o ../publish --self-contained -r linux-x64

    - name: Upload publish artifacts
      uses: actions/upload-artifact@v4
      with:
        name: published-app
        path: publish/

  # Build Docker Image Job
  build-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download publish artifacts
      uses: actions/download-artifact@v4
      with:
        name: published-app
        path: publish/

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Generate image tag
      id: image-tag
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "tag=latest" >> $GITHUB_OUTPUT
          echo "tag_version=v${{ github.run_number }}" >> $GITHUB_OUTPUT
        else
          echo "tag=develop" >> $GITHUB_OUTPUT
          echo "tag_version=dev-${{ github.run_number }}" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag_version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image details
      run: |
        echo "Built and pushed image:"
        echo "${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}"
        echo "${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag_version }}"

  # Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing

    - name: Set kubectl context
      run: |
        kubectl config use-context ${{ env.AKS_CLUSTER_NAME }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }}-dev --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to development
      run: |
        # Update image tag in deployment
        sed -i 's|image: acrblogappsdk8s.azurecr.io/blog-app:latest|image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:dev-${{ github.run_number }}|g' k8s/k8s-all-in-one.yaml
        sed -i 's|namespace: blog-app|namespace: ${{ env.NAMESPACE }}-dev|g' k8s/k8s-all-in-one.yaml
        
        # Apply deployment
        kubectl apply -f k8s/k8s-all-in-one.yaml -n ${{ env.NAMESPACE }}-dev

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }}-dev --timeout=300s

    - name: Get service information
      run: |
        kubectl get services -n ${{ env.NAMESPACE }}-dev

  # Deploy to Production
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AKS_CLUSTER_NAME }} --overwrite-existing

    - name: Set kubectl context
      run: |
        kubectl config use-context ${{ env.AKS_CLUSTER_NAME }}

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy to production
      run: |
        # Update image tag in deployment
        sed -i 's|image: acrblogappsdk8s.azurecr.io/blog-app:latest|image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:v${{ github.run_number }}|g' k8s/k8s-all-in-one.yaml
        
        # Apply deployment
        kubectl apply -f k8s/k8s-all-in-one.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} --timeout=300s

    - name: Apply LoadBalancer service
      run: |
        kubectl apply -f k8s/loadbalancer-service.yaml

    - name: Get service information
      run: |
        echo "Deployment completed successfully!"
        kubectl get services -n ${{ env.NAMESPACE }}
        kubectl get pods -n ${{ env.NAMESPACE }}

    - name: Get LoadBalancer IP
      run: |
        echo "Waiting for LoadBalancer IP..."
        kubectl get service blog-app-loadbalancer -n ${{ env.NAMESPACE }} --output jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "LoadBalancer IP not ready yet"

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
